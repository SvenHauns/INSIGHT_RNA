#!python

#!/usr/bin/env python3
import os
import math

SAMPLES = set()
sample_dict = {}

SAMPLES = config["samples"].split(",")
gtf_file = config["gff_path"]
model_path = config["model_path"]
DESEQ_OUTPUT = config["deseq_output"]
INPUT_DATA = "targets/"
EXON_FILE = config["exons"]
ECLIP_PATH = config["eclip"]


COVERAGE = "coverage/"
TARGET = "targets/"
TARGET_OUTPUT = "targets/output/"
TARGET_OUTPUT_5UTR = "targets/output_5utr/"
TARGET_OUTPUT_3UTR = "targets/output_3utr/"
OUTPUT_PDF = "pdf/"


rule all:
    input:
        expand(f"{TARGET}{{sample}}.combination_summary.txt", sample=SAMPLES),
        expand(f"{TARGET}{{sample}}.varna_summary.txt", sample=SAMPLES),
        expand(f"{OUTPUT_PDF}{{sample}}.pdf_summary.txt", sample=SAMPLES),
        

rule combine_information:
    input:
        input_dms = lambda wildcards: f"{INPUT_DATA}{wildcards.sample}/{wildcards.sample}.dms_coverage_all_3utr.txt",
        target_file = lambda wildcards: f"{TARGET}{wildcards.sample}.correlation_rnaplfold_oops_summary_target.txt",
    output:
        output_summary = f"{TARGET}{{sample}}.combination_summary.txt",
    conda:
        "envs/rnafold.yaml"
    shell:
        """
        mkdir -p {TARGET_OUTPUT}
        mkdir -p {TARGET_OUTPUT_5UTR}
        mkdir -p {TARGET_OUTPUT_3UTR}

        python scripts/combine_information_3utr.py \
            --dms_analysis_file {input.input_dms} \
            --target_file {input.target_file} \
            --target_folder {TARGET_OUTPUT} \
            --oops_seq_folder {DESEQ_OUTPUT} \
            --summary {output.output_summary} \
            --exon_file {EXON_FILE} \
            --gff_path {gtf_file} \
            --target_folder_5utr {TARGET_OUTPUT_5UTR} \
            --target_folder_3utr {TARGET_OUTPUT_3UTR} \
            --model_path {model_path} \
            --eclip_path {ECLIP_PATH}
        """
        
rule extracted_background:
    input:
        input_dms = lambda wildcards: f"{INPUT_DATA}{wildcards.sample}/{wildcards.sample}.dms_coverage_all_3utr.txt",
    output:
        peak_sequences = f"{TARGET}{{sample}}.peak_sequences.fa",
        baseline_file = f"{TARGET}{{sample}}.baseline_sequences.fa",
    conda:
        "envs/rnafold.yaml"
    shell:
        """
        mkdir -p {TARGET_OUTPUT}
        python scripts/extract_background_regions.py \
            --dms_analysis_file {input.input_dms} \
            --baseline_file {output.baseline_file} \
            --oops_seq_folder {DESEQ_OUTPUT} \
            --peak_sequences {output.peak_sequences} \
            --exon_file {EXON_FILE}
        """


rule run_varna:
    input:
        summary = lambda wildcards: f"{TARGET}{{sample}}.combination_summary.txt",
    output:
        output_file = f"{TARGET}{{sample}}.varna_summary.txt",
        output_file2 = f"{TARGET}{{sample}}.varna_summary_5utr.txt",
        output_file3 = f"{TARGET}{{sample}}.varna_summary_3utr.txt",
    conda:
        "envs/java.yaml"
    shell:
        """
        mkdir -p {TARGET_OUTPUT}
        python scripts/run_varna.py \
            --target_folder {TARGET_OUTPUT} \
            --output_summary {output.output_file} \
            --version 1

        python scripts/run_varna.py \
            --target_folder {TARGET_OUTPUT_5UTR} \
            --output_summary {output.output_file2} \
            --version 2

        python scripts/run_varna.py \
            --target_folder {TARGET_OUTPUT_3UTR} \
            --output_summary {output.output_file3} \
            --version 3
        """


rule create_pdf:
    input:
        summary = lambda wildcards: f"{TARGET}{{sample}}.varna_summary.txt",
        input_dms = lambda wildcards: f"{INPUT_DATA}{wildcards.sample}/{wildcards.sample}.dms_coverage_all_3utr.txt",
    output:
        output_pdf = f"{OUTPUT_PDF}{{sample}}.pdf_summary.txt",
    conda:
        "envs/pil.yaml"
    shell:
        """
        mkdir -p {OUTPUT_PDF}
        
        python scripts/create_pdf.py \
            --output_folder {TARGET_OUTPUT} \
            --output_folder_3utr {TARGET_OUTPUT_3UTR} \
            --output_folder_5utr {TARGET_OUTPUT_5UTR} \
            --dms_analysis_file {input.input_dms} \
            --output_pdf {output.output_pdf} \
            --pdf_folder {OUTPUT_PDF}
            
        """
        


